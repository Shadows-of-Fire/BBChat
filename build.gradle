buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "${mod_version}"
group = 'com.breakinblocks.bbchat'
archivesBaseName = "bbchat-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bbchat {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                bbchat {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'bbchat', '--all', '--output', file('src/generated/resources/')

            mods {
                bbchat {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile ("net.dv8tion:JDA:${jda_version}") {
        exclude module: 'opus-java'
        exclude module: 'jsr305'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'mod_version', project.mod_version
    inputs.property 'mc_version', project.mc_version
    inputs.property 'forge_version_major', project.forge_version_major

    // replace stuff in mods.toml, nothing else
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace mod_version and mc_version and forge_version_major
        expand 'mod_version': "${mod_version}",
                'mc_version': "${mc_version}",
                'forge_version_major' : "${forge_version_major}"
    }

    // copy everything else except the mods.toml
    from (sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "BBChat",
                "Specification-Vendor": "Breakin' Blocks",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Breakin' Blocks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier = "" // remove -all from the jar

    dependencies {
        include(dependency('net.dv8tion:JDA'))
        include(dependency('org.jetbrains:annotations'))
        include(dependency('org.slf4j:slf4j-api'))
        include(dependency('com.neovisionaries:nv-websocket-client'))
        include(dependency('com.squareup.okhttp3:okhttp'))
            include(dependency('com.squareup.okio:okio'))
        include(dependency('org.apache.commons:commons-collections4'))
        include(dependency('net.sf.trove4j:trove4j'))
        include(dependency('com.fasterxml.jackson.core:jackson-databind'))
            include(dependency('com.fasterxml.jackson.core:jackson-annotations'))
            include(dependency('com.fasterxml.jackson.core:jackson-core'))
    }

    ext.relocatePackage = { p -> relocate(p, 'com.breakinblocks.bbchat.shadow.' + p)}

    relocatePackage('net.dv8tion')
        relocatePackage('com.iwebpp.crypto')
    relocatePackage('org.jetbrains.annotations')
        relocatePackage('org.intellij.lang.annotations')
    relocatePackage('org.slf4j')
    relocatePackage('com.neovisionaries.ws.client')
    relocatePackage('okhttp3')
        relocatePackage('okio')
    relocatePackage('org.apache.commons.collections4')
    relocatePackage('gnu.trove')
    relocatePackage('com.fasterxml.jackson.databind')
        relocatePackage('com.fasterxml.jackson.core')
        relocatePackage('com.fasterxml.jackson.annotation')
}

reobf {
    shadowJar {}
}

build.dependsOn(shadowJar)
